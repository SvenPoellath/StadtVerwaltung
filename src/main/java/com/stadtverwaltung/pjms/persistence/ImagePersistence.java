package com.stadtverwaltung.pjms.persistence;


import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Manages images files
 */
public class ImagePersistence {


    /**
     * Constructor checks for images path and creates directory if neccessary
     */
    public ImagePersistence() {
        Path path = Path.of("images");
        if (!Files.exists(path)) {
            try {
                Files.createDirectory(path);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    /**
     * Saves uploaded image to the backend
     * @param image The uploaded image as a MultiPartFile
     * @return Unique ImageID generated from the backend
     */
    public String persistImage(MultipartFile image) {
        String id = generateID();
        try {
            Files.copy(image.getInputStream(), generatePath(id));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        if (checkIfExists(id)) {
            return id;
        } else {
            return null;
        }



    }

    /**
     * generates a unique pictureID used as a filename
     * @return Generated pictureID
     */
    private String generateID() {
        String id;
        do {
            id = RandomStringUtils.randomAlphanumeric(12);
        } while (checkIfExists(id));
        return id;
    }

    /**
     * Generates a path from a given pictureID
     * @param id ID of the given picture
     * @return Full path of the picture for later use
     */
    private Path generatePath(String id) {
        return Path.of("images/" + id + ".jpeg");
    }

    /**
     * checks if a generated ID already exists to prevent doubles
     * @param id pictureID generated by backend
     * @return true if file already exists
     */
    private boolean
    checkIfExists(String id) {
        return Files.exists(generatePath(id));
    }

    /**
     * Loads image from the images folder
     * @param id pictureID given by the method
     * @return the image requested as a byte array or null if not found
     * @throws IOException IOException for generic file error
     */
    public byte[] getImage(String id) throws IOException {
        byte[] returnBytes = null;
        if (checkIfExists(id)) {
            returnBytes = Files.readAllBytes(generatePath(id));
        }
        return returnBytes;
    }
}
